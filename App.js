import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ActivityIndicator,
  FlatList,
  Button,
} from 'react-native';
import * as Location from 'expo-location';
import axios from 'axios';
import WeatherDayCard from './WeatherDayCard'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

// ‚ö†Ô∏è –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π –∫–ª—é—á –æ—Ç Visual Crossing
const API_KEY = 'S8EZG6Y5NW4URSU4T2PMECRZA'; // <-- –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π



export default function App() {
  const [weather, setWeather] = useState(null);
  const [forecast, setForecast] = useState([]);
  const [errorMsg, setErrorMsg] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchWeatherByLocation();
  }, []);

  const fetchWeatherByLocation = async () => {
    setLoading(true);
    try {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
        setLoading(false);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      let locationData = await Location.getCurrentPositionAsync({});
      const { latitude, longitude } = locationData.coords;

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å–æ–≥–ª–∞—Å–Ω–æ Timeline API
      const url = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${latitude},${longitude}`;

      const params = {
        key: API_KEY,
        unitGroup: 'metric',
        include: 'current,days',
        contentType: 'json',
      };

      const response = await axios.get(url, { params });

      if (response.data) {
        const data = response.data;

        // –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ ‚Äî currentConditions —ç—Ç–æ –û–ë–™–ï–ö–¢
        if (data.currentConditions) {
          const current = data.currentConditions;

          setWeather({
            city: data.resolvedAddress || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ',
            temp: current.temp,
            feelsLike: current.feelslike,
            conditions: current.icon, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∫–æ–Ω–∫—É
            windSpeed: current.windspeed,
            humidity: current.humidity,
          });
        } else {
          setErrorMsg('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ');
        }

        // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–Ω–∏
        if (data.days && Array.isArray(data.days)) {
          const forecastData = data.days.slice(1, 6).map((day) => {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            const date = new Date(day.datetime);
            const dayOfWeek = date.toLocaleDateString('ru-RU', { weekday: 'long' });

            return {
              date: dayOfWeek.charAt(0).toUpperCase() + dayOfWeek.slice(1), // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
              tempMax: day.tempmax,
              tempMin: day.tempmin,
              conditions: day.icon, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∫–æ–Ω–∫—É
            };
          });

          setForecast(forecastData);
        } else {
          setForecast([]);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã:', error.response?.data || error.message);
      setErrorMsg(`–û—à–∏–±–∫–∞: ${error.message}`);
    }

    setLoading(false);
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#007AFF" />
        <Text>–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>üå§Ô∏è –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å</Text>

      {errorMsg ? (
        <Text style={styles.error}>{errorMsg}</Text>
      ) : weather ? (
        <>
          <Text style={styles.text}>üìç –ì–æ—Ä–æ–¥: {weather.city}</Text>
          <Text style={styles.text}>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather.temp}¬∞C</Text>
          <Text style={styles.text}>üß£ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather.feelsLike}¬∞C</Text>
          <Text style={styles.text}>‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {weather.conditions}</Text>
          <Text style={styles.text}>üå¨Ô∏è –í–µ—Ç–µ—Ä: {weather.windSpeed} –º/—Å</Text>
          <Text style={styles.text}>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather.humidity}%</Text>
        </>
      ) : (
        <Text>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ</Text>
      )}

      <Text style={styles.subtitle}>üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π</Text>

      {forecast.length > 0 ? (
        <FlatList
          data={forecast}
          keyExtractor={(item, index) => index.toString()}
          renderItem={({ item }) => <WeatherDayCard day={item} />}
          horizontal={false}
          showsVerticalScrollIndicator={false}
          contentContainerStyle={styles.forecastContainer}
        />
      ) : (
        <Text>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</Text>
      )}

      <Button title="üîÑ –û–±–Ω–æ–≤–∏—Ç—å" onPress={fetchWeatherByLocation} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'flex-start',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#f9f9f9',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 20,
    marginTop: 20,
    marginBottom: 10,
  },
  text: {
    fontSize: 18,
    marginVertical: 4,
  },
  error: {
    fontSize: 18,
    color: 'red',
  },
  forecastContainer: {
    paddingBottom: 20,
  },
});